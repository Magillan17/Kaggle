import pandas as pd
import numpy as np
pd.set_option('display.max_rows', 1000)
pd.set_option('display.max_columns', 1000)
pd.set_option('display.width', 1000)
import time
start_time = time.time()

print('start')
df = pd.read_csv('train.csv')
# print(df.head())
# print(df.shape)
# df = df.sample(30000,random_state=17)
# print(df.isnull().values.any())


df = pd.get_dummies(df, ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9'])
y = df['target']
df = df.drop(['target','cat6_G', 'id'], axis=1)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(df, y, random_state=17, test_size=0.2)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
model = RandomForestRegressor()
from sklearn.model_selection import GridSearchCV
param_grid = {
    'bootstrap': [True],
    'max_depth': [110],
    'max_features': [3],
    'min_samples_leaf': [5],
    'min_samples_split': [8],
    'n_estimators': [800]
}

grid_search = GridSearchCV(model,param_grid,cv=3,n_jobs=-1,verbose=2)
grid_search.fit(df, y)

best_grid = grid_search.best_params_

print(best_grid)
predict_X = grid_search.predict(X_test)

print(mean_squared_error(Y_test, predict_X)**0.5)
print("--- %s seconds ---" % (time.time() - start_time))

df = pd.read_csv('./test.csv')
df = pd.get_dummies(df, ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9'])
df = df.drop(['id'], axis=1)
answer = grid_search.predict(df)

sub = pd.read_csv('sample_submission.csv')
sub['target'] = answer
sub.to_csv('Answer.csv', index=False)
print("--- %s seconds ---" % (time.time() - start_time))
